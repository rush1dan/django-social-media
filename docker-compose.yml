services:
  server:
    build:
      context: ./server/
    image: mydjango_image    #docker compose built image name
    container_name: django_container
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./server:/server_app   #Only for development :: Remove this volume while deploying and instead COPY all with Dockerfile and docker build
      - /server_app/.venv/    #Don't include .venv in the container; only for local intellisense purposes
    ports:
      - "8000:8000"
    environment:    #Replace with .env file in production/deployment
      - POSTGRES_NAME=social_media_db
      - POSTGRES_USER=demo_user
      - POSTGRES_PASSWORD=demo_password
    depends_on:
      - db
  db:
    image: postgres
    container_name: postgres_container
    restart: always
    volumes:
      - ./server/data/db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:    #Replace with .env file in production/deployment
      - POSTGRES_DB=social_media_db
      - POSTGRES_USER=demo_user
      - POSTGRES_PASSWORD=demo_password



## To setup django project in docker image and automatically sync created files and folders bi-directionally with local dev environment through volume bind mount:
## docker compose run web django-admin startproject djangoserver .
## ** last . means create django project in the current docker workdir
## To run django server: 
## docker compose up
## To interact with the shell within the docker container for this app:
## docker compose exec web sh
## mkdir to make directory ; rm -r [foldername] to remove folder; mv [foldername] ./[parent_folder]/ to move folder
## To interact with the python-django shell within docker shell:python manage.py shell 